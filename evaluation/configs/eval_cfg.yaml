defaults:
  - _self_ # First takes priority so any properties redefined here take precedence
  - paths: ibme_cluster # Simply override in cli call

tasks: ['gen_latents', 'latents_to_videos','compute_metrics' ] #to enable metrics
#tasks: ['compute_metrics', 'latents_to_videos'] #to disable metrics
#tasks: ['compute_metrics'] #to enable metrics

real_data_path: ${paths.data_path}/CAMUS_Processed_Frames
run_dir: ${paths.train_output_path}/hydra_outputs/2025-09-26/09-09-34
ckpt_name: last.ckpt

# Debugging
dataset_kwargs:
  n_sample_videos: 4  # Query to filter dataset, e.g. 'n_missing_frames == "max" and target_ef_bin == 1'; null to use all

output_dir: ${run_dir}/evaluation

# Inference parameters
inference_schemes:
  ef_samples_in_range:
    ef_gen_range: [0.1, 0.8]  # Range of ef_gen values to sample from uniformly
    n_ef_samples: 4  # Number of ef_gen samples per video in ef_gen_range

  ef_histogram_matching:
    plan_path: ${paths.project_path}/evaluation/eval_plans/ef_histogram_matching_plan.csv  # Path to CSV file with generation plan
    batch_size: 4



test_n_missing_frames: [max, 0.75, 0.5, 0.25]  # Proportion of frames to mask

# Latents to videos parameters
time_and_date: '2025-10-03/20-37-30'  # Subdirectory under latents_dir to evaluate
videos_root: ${run_dir}/evaluation/decoded_videos/${time_and_date} #null # Directory containing decoded videos; if null, will use output of latents_to_videos step
latents_dirs: 
  ef_samples_in_range: ${run_dir}/evaluation/latents/${time_and_date}/ef_samples_in_range #null 
  ef_histogram_matching: ${run_dir}/evaluation/latents/${time_and_date}/ef_histogram_matching #null

repo_id: HReynaud/EchoFlow
types: [videowise]  # output types e.g., 'videowise' or 'framewise' or both
queries:
  ef_histogram_matching:
    generation_nmfmax_bin1: 'n_missing_frames == "max" and target_ef_bin == 1'
    generation_nmf75p_bin1: 'n_missing_frames == "75p" and target_ef_bin == 1'
  ef_samples_in_range:
    reconstruction_nmfmax: 'rec_or_gen == "rec" and n_missing_frames == "max"'
    reconstruction_nmf75p: 'rec_or_gen == "rec" and n_missing_frames == "75p"'
    #reconstruction_nmf50p: 'rec_or_gen == "rec" and n_missing_frames == "50p"'
    #reconstruction_nmf25p: 'rec_or_gen == "rec" and n_missing_frames == "25p"'
    #generation_nmfmax: 'rec_or_gen == "gen" and n_missing_frames == "max"'
    #generation_nmf75p: 'rec_or_gen == "gen" and n_missing_frames == "75p"'
    #generation_nmf50p: 'rec_or_gen == "gen" and n_missing_frames == "50p"'
    #generation_nmf25p: 'rec_or_gen == "gen" and n_missing_frames == "25p"'
  

fps_metadata_csv: ${paths.data_path}/CAMUS_Latents_{vae_res}/metadata.csv # CSV with video_name and FPS column to override default FPS

# Metrics parameters (used when tasks includes 'compute_metrics')
metrics:
  inference_roots:
    ef_histogram_matching: 
      generation_nmfmax_bin1: ${videos_root}/ef_histogram_matching/generation/nmfmax/bin1
      generation_nmf75p_bin1: ${videos_root}/ef_histogram_matching/generation/nmf75p/bin1
    ef_samples_in_range:
      reconstruction_nmfmax: ${videos_root}/ef_samples_in_range/reconstruction/nmfmax
      reconstruction_nmf75p: ${videos_root}/ef_samples_in_range/reconstruction/nmf75p
      #reconstruction_nmf50p: ${videos_root}/ef_samples_in_range/reconstruction/nmf50p
      #reconstruction_nmf25p: ${videos_root}/ef_samples_in_range/reconstruction/nmf25p
  real_glob: ['*']            # glob pattern to match real videos
  fake_glob: ['*']            # glob pattern to match generated videos
  which: [ssim, psnr, lpips_vgg]  # metrics to compute
  stylegan_metrics: [fid50k_full, fvd2048_10f]
  confidence: 0.95           # confidence level for CIs
  #resize: [112, 112]         # optional resize (H, W); set to null to keep native


hydra:
  run:
    dir: ${paths.train_output_path}/hydra_eval_outputs/${now:%Y-%m-%d}/${now:%H-%M-%S}